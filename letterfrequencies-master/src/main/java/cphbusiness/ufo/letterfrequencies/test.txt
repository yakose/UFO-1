Software Development Fall 2019
Soft 2019
Code performance
Plan for today:

Follow up on last homework exercise
Performance measurement and profiling
Reporting your findings
Learning outcomes
After this module you should be able to:

Measure performance in your code
Understand the issues of JIT optimizations and branch prediction
Use the profiler of your IDE to spot bottlenecks
Be able to report your timing measurements in a believeable fashion
Relevance
In relation to the goal of the course, these skills are useful in both:

Establishing that a performance problem actually exist,
Narrowing it down to what is its root course. - notice, measuring timing does not solve an issue.
Establish with a second performance measurement that the situation have been improved
Resources
Our scrapbook
Microbenchmarks in Java and C# by Peter Sestoft
The archive of UFO netbeans projects
Slides
Exercises
Short exercises
Performance testing
We are going to find the bottleneck in the mergesort algorithms in this small suite of implementation attemps by Kasper.

Run the program a few times to see if you can get consistent results
Try to close all programs, and run it from a console - do you get more consistent results?
Comparing with the person next to you - who has the most consistent results?
Looking for the bottleneckâ€¦

The QuickSort algorithm seems to run quite a lot faster than the mergesort (around 5-8 times).
What hypothesis could we have?

Try to use the Netbeans profiler on each of the algorithms.
Home exercise
In the early days of crypthography analysing the frequency of letters could be used to break an encryption.

This netbeans project reads a file and prints out the frequency of each of the letters in that file.

You need to make it run at least 50% faster than it is now, and should be able to get to around 100% faster.

Do not include the the time of print_tally in your analysis or optimizations
Hand-in:
Your handin (link on peergrade to project on github) should contain the following:

Documentation of the current performance of the program, including why you believe your performance measurements are free of errors.
An explanation of the bottlenecks in the program.
A hypothesis of what is causing the problem, and a changed program which is improved to solve the problem.
Documentation of the new performance, again including documentation that the measurements are free of errors.
Notice: there might be more than one optimization needed to achieve optimal performance.
Review:
As a reviewer you should focus on the following aspects:

Do your own measurements of the baseline (original program) match that the one your review. The actual times will be different due to different hardware, but do you believe the reviewed measurements to be free of errors?
On your own machine, can you reproduce the claimed speedup of reviewed solution. Including the stability of the results.
If you have a faster solution, tell what you did to improve it. If the reviewed solution is faster than your own - remember to give kudos.
Anders, Dora, Jacob, and Kasper
This page was generated by GitHub Pages.